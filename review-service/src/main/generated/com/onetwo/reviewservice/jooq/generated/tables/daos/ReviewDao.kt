/*
 * This file is generated by jOOQ.
 */
package com.onetwo.reviewservice.jooq.generated.tables.daos


import com.onetwo.reviewservice.jooq.generated.tables.Review
import com.onetwo.reviewservice.jooq.generated.tables.records.ReviewRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ReviewDao(configuration: Configuration?) : DAOImpl<ReviewRecord, com.onetwo.reviewservice.jooq.generated.tables.pojos.Review, Long>(Review.REVIEW, com.onetwo.reviewservice.jooq.generated.tables.pojos.Review::class.java, configuration) {

    /**
     * Create a new ReviewDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.onetwo.reviewservice.jooq.generated.tables.pojos.Review): Long? = o.id

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<com.onetwo.reviewservice.jooq.generated.tables.pojos.Review> = fetchRange(Review.REVIEW.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<com.onetwo.reviewservice.jooq.generated.tables.pojos.Review> = fetch(Review.REVIEW.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    fun fetchOneById(value: Long): com.onetwo.reviewservice.jooq.generated.tables.pojos.Review? = fetchOne(Review.REVIEW.ID, value)

    /**
     * Fetch records that have <code>USER_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUserId(lowerInclusive: Long?, upperInclusive: Long?): List<com.onetwo.reviewservice.jooq.generated.tables.pojos.Review> = fetchRange(Review.REVIEW.USER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>USER_ID IN (values)</code>
     */
    fun fetchByUserId(vararg values: Long): List<com.onetwo.reviewservice.jooq.generated.tables.pojos.Review> = fetch(Review.REVIEW.USER_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>CONTENT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfContent(lowerInclusive: String?, upperInclusive: String?): List<com.onetwo.reviewservice.jooq.generated.tables.pojos.Review> = fetchRange(Review.REVIEW.CONTENT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>CONTENT IN (values)</code>
     */
    fun fetchByContent(vararg values: String): List<com.onetwo.reviewservice.jooq.generated.tables.pojos.Review> = fetch(Review.REVIEW.CONTENT, *values)

    /**
     * Fetch records that have <code>RATING BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRating(lowerInclusive: Int?, upperInclusive: Int?): List<com.onetwo.reviewservice.jooq.generated.tables.pojos.Review> = fetchRange(Review.REVIEW.RATING, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>RATING IN (values)</code>
     */
    fun fetchByRating(vararg values: Int): List<com.onetwo.reviewservice.jooq.generated.tables.pojos.Review> = fetch(Review.REVIEW.RATING, *values.toTypedArray())

    /**
     * Fetch records that have <code>CREATED_AT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<com.onetwo.reviewservice.jooq.generated.tables.pojos.Review> = fetchRange(Review.REVIEW.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: LocalDateTime): List<com.onetwo.reviewservice.jooq.generated.tables.pojos.Review> = fetch(Review.REVIEW.CREATED_AT, *values)
}
